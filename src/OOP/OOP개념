1. OOP(Object-Oriented-Programing) 개념

현실에 어떤 대상을 개체를 객체로 가짐
현실에 사람이면, 필드-> 나이,이름,국적 메서드-> 뛴기,말하기,보기 등등 ..

1.1 캡슐화 (Encapsulation)

-> Encapsulation 패키지 정리
접근 제어자, private default protected public

1.2 상속 (Inheritance)

-> Inheritance 패키지 정리
1.2.1 extends 기본 구체 클래스 상속 super 사용 가능 인스턴스화 가능 , 추상 메서드를 가질 수 없으면 extends 로 상속 가능
1.2.2 abstract 추상 클래스 상속 super 사용 불가능 -> 추상클래스는 인스턴스화 가능 , 추상 메서드는 가질 수 있으나 강제로 오버라이딩 해줘야함


1.3 다형성 (Polymorphism)


1.4 추상화 (Abstraction)

-> polymorphism 패키지 정리
1.3.1 인테페이스 필드를 가질 수 없으면 추상화만 시켜놓고 implements로 메서드를 구현체를 완성해야함 이로써 다양성이 증가하면 코드 수정이 줄어든다.

2 OOP 장점

2.1 코드 재사용성
2.2 유지보수 용의함
2.3 확장성
2.4 현실 모델링이 가능해짐

3 OOP를 가진 언어
Kotlin Swift Python 등